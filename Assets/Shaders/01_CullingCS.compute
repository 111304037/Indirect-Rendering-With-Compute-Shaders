//--------------------------------------------------------------------------------------
// Includes
//--------------------------------------------------------------------------------------

#include "ShaderInclude_IndirectStructs.cginc"

//--------------------------------------------------------------------------------------
// Pragmas
//--------------------------------------------------------------------------------------

#pragma kernel CSMain

//--------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------

#define THREAD_GROUP_SIZE_X 64
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

#define LOD00_RANGE 500
#define LOD01_RANGE 1500

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------

cbuffer CB
{
	bool _ShouldFrustumCull;
	bool _ShouldOcclusionCull;
	bool _ShouldLOD;
	float _ShadowCullingLength;
	float2 _HiZTextureSize;
	float3 _CamFarCenter;
	float3 _CamNearCenter;
	float3 _LightDirection;
	float4x4 _UNITY_MATRIX_MVP;
	Texture2D<float4> _HiZMap;
	SamplerState sampler_HiZMap; // "sampler" + “_HiZMap”
};

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------

RWStructuredBuffer<ComputeShaderInputData> positionBuffer;
RWStructuredBuffer<uint> argsBuffer;
RWStructuredBuffer<uint> _IsVisibleBuffer;

//--------------------------------------------------------------------------------------
// Kernels & Functions
//--------------------------------------------------------------------------------------

inline bool AreDirectionsFacingEachother(float3 dir1, float3 dir2)
{
	return dot(dir1, dir2) > 0.0;
}

inline void CalculateBoundingBoxCorners(in float3 center, in float3 extents, inout BoundingBox boxCorners)
{
	boxCorners.center = center;
	boxCorners.minPos = center - extents;
	boxCorners.maxPos = center + extents;
	boxCorners.corners[0] = float4(center + extents * float3(-1.0, -1.0, -1.0), 1.0);
	boxCorners.corners[1] = float4(center + extents * float3(-1.0, -1.0,  1.0), 1.0);
	boxCorners.corners[4] = float4(center + extents * float3( 1.0, -1.0, -1.0), 1.0);
	boxCorners.corners[5] = float4(center + extents * float3( 1.0, -1.0,  1.0), 1.0);
	boxCorners.corners[2] = float4(center + extents * float3(-1.0,  1.0, -1.0), 1.0);
	boxCorners.corners[3] = float4(center + extents * float3(-1.0,  1.0,  1.0), 1.0);
	boxCorners.corners[6] = float4(center + extents * float3( 1.0,  1.0, -1.0), 1.0);
	boxCorners.corners[7] = float4(center + extents * float3( 1.0,  1.0,  1.0), 1.0);
}

inline void CalculateClipMinAndMax(in BoundingBox boxCorners, inout float3 clipmin, inout float3 clipmax)
{
	boxCorners.corners[0] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[0]);
	boxCorners.corners[1] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[1]);
	boxCorners.corners[2] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[2]);
	boxCorners.corners[3] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[3]);
	boxCorners.corners[4] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[4]);
	boxCorners.corners[5] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[5]);
	boxCorners.corners[6] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[6]);
	boxCorners.corners[7] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[7]);
	
	
	clipmin = float3(1.0, 1.0, 1.0);
	clipmax = float3(0.0, 0.0, 0.0);
	for (int n = 0; n < 8; n++)
	{
		float4 clipPos = boxCorners.corners[n] / boxCorners.corners[n].w;

        clipPos.xy = clipPos.xy * float2(0.5, 0.5) + float2(0.5, 0.5);
		clipPos.z = 1.0 - clipPos.z;
		
		clipmin.x = min(clipmin.x, clipPos.x);
		clipmin.y = min(clipmin.y, clipPos.y);
		clipmin.z = min(clipmin.z, clipPos.z);

		clipmax.x = max(clipmax.x, clipPos.x);
		clipmax.y = max(clipmax.y, clipPos.y);
		clipmax.z = max(clipmax.z, clipPos.z);
	}
}

// Check Hi-Z Culling
// http://rastergrid.com/blog/2010/10/hierarchical-z-map-based-occlusion-culling/
// https://github.com/nvpro-samples/gl_occlusion_culling
// http://blog.selfshadow.com/publications/practical-visibility/
inline bool ShouldHiZCull(ComputeShaderInputData instance, float3 position, BoundingBox boundingBox)
{
	if (_ShouldOcclusionCull == false)
	{
		return false;
	}

	// Calculate the min and max positions of the instance bounds
	float3 clipmin;
	float3 clipmax;
	CalculateClipMinAndMax(boundingBox, clipmin, clipmax);

    // Hi-Z approach that allows for more samples.
    // https://www.gamedev.net/blogs/entry/2249535-hierarchical-z-buffer-occlusion-culling-updated-07152011/
    const  float    widthSS = abs(clipmax.x - clipmin.x);
	const  float   heightSS = abs(clipmax.y - clipmin.y);	
    const  float  maxSizeSS = max(widthSS * _HiZTextureSize.x, heightSS * _HiZTextureSize.y);	
    const  float        mip = max(0, ceil(log2(maxSizeSS)));
    
    float HIZdepth = 0.0;
	HIZdepth = max(HIZdepth, _HiZMap.SampleLevel(sampler_HiZMap, clipmin.xy, mip).r);
	HIZdepth = min(HIZdepth, _HiZMap.SampleLevel(sampler_HiZMap, clipmax.xy, mip).r);

	return (clipmin.z <= HIZdepth);
}

inline void CalculateCameraPlanes(inout FrustumPlane mPlanes[6])
{
	// Here we are using Column Major matrix

	// Row Major Matrix
    // _m00, _m01, _m02, _m03
    // _m10, _m11, _m12, _m13
    // _m20, _m21, _m22, _m23
    // _m30, _m31, _m32, _m33

	// Column Major Matrix
	// _m00, _m10, _m20, _m30
	// _m01, _m11, _m21, _m31
	// _m02, _m12, _m22, _m32
	// _m03, _m13, _m23, _m33


	// Left clipping plane.
	mPlanes[0].normal = float4(
		_UNITY_MATRIX_MVP._m30 + _UNITY_MATRIX_MVP._m00, 
		_UNITY_MATRIX_MVP._m31 + _UNITY_MATRIX_MVP._m01, 
		_UNITY_MATRIX_MVP._m32 + _UNITY_MATRIX_MVP._m02, 
		_UNITY_MATRIX_MVP._m33 + _UNITY_MATRIX_MVP._m03
	);

	// Right clipping plane.
	mPlanes[1].normal = float4(
		_UNITY_MATRIX_MVP._m30 - _UNITY_MATRIX_MVP._m00, 
		_UNITY_MATRIX_MVP._m31 - _UNITY_MATRIX_MVP._m01, 
		_UNITY_MATRIX_MVP._m32 - _UNITY_MATRIX_MVP._m02, 
		_UNITY_MATRIX_MVP._m33 - _UNITY_MATRIX_MVP._m03
	);

	// Bottom clipping plane.
	mPlanes[2].normal = float4(
		_UNITY_MATRIX_MVP._m30 + _UNITY_MATRIX_MVP._m10, 
		_UNITY_MATRIX_MVP._m31 + _UNITY_MATRIX_MVP._m11, 
		_UNITY_MATRIX_MVP._m32 + _UNITY_MATRIX_MVP._m12, 
		_UNITY_MATRIX_MVP._m33 + _UNITY_MATRIX_MVP._m13
	);

	// Top clipping plane.
	mPlanes[3].normal = float4(
		_UNITY_MATRIX_MVP._m30 - _UNITY_MATRIX_MVP._m10, 
		_UNITY_MATRIX_MVP._m31 - _UNITY_MATRIX_MVP._m11, 
		_UNITY_MATRIX_MVP._m32 - _UNITY_MATRIX_MVP._m12, 
		_UNITY_MATRIX_MVP._m33 - _UNITY_MATRIX_MVP._m13
	);

	// Near clipping plane.
	mPlanes[4].normal = float4(
		_UNITY_MATRIX_MVP._m30 + _UNITY_MATRIX_MVP._m20, 
		_UNITY_MATRIX_MVP._m31 + _UNITY_MATRIX_MVP._m21, 
		_UNITY_MATRIX_MVP._m32 + _UNITY_MATRIX_MVP._m22, 
		_UNITY_MATRIX_MVP._m33 + _UNITY_MATRIX_MVP._m23
	);

	// Far clipping plane.
	mPlanes[5].normal = float4(
		_UNITY_MATRIX_MVP._m30 - _UNITY_MATRIX_MVP._m20, 
		_UNITY_MATRIX_MVP._m31 - _UNITY_MATRIX_MVP._m21, 
		_UNITY_MATRIX_MVP._m32 - _UNITY_MATRIX_MVP._m22, 
		_UNITY_MATRIX_MVP._m33 - _UNITY_MATRIX_MVP._m23
	);
	
	// Normalize the planes: normalizedPlane = (plane.xyzw) / sqrt(plane.x^2 + plane.y^2 + plane.z^2)
	// plane.xyz is now the normal and plane.w contains the distance from zero pos to the plane
	mPlanes[0].normal /= sqrt(mPlanes[0].normal.x * mPlanes[0].normal.x + mPlanes[0].normal.y * mPlanes[0].normal.y + mPlanes[0].normal.z * mPlanes[0].normal.z);
	mPlanes[1].normal /= sqrt(mPlanes[1].normal.x * mPlanes[1].normal.x + mPlanes[1].normal.y * mPlanes[1].normal.y + mPlanes[1].normal.z * mPlanes[1].normal.z);
	mPlanes[2].normal /= sqrt(mPlanes[2].normal.x * mPlanes[2].normal.x + mPlanes[2].normal.y * mPlanes[2].normal.y + mPlanes[2].normal.z * mPlanes[2].normal.z);
	mPlanes[3].normal /= sqrt(mPlanes[3].normal.x * mPlanes[3].normal.x + mPlanes[3].normal.y * mPlanes[3].normal.y + mPlanes[3].normal.z * mPlanes[3].normal.z);
	mPlanes[4].normal /= sqrt(mPlanes[4].normal.x * mPlanes[4].normal.x + mPlanes[4].normal.y * mPlanes[4].normal.y + mPlanes[4].normal.z * mPlanes[4].normal.z);
	mPlanes[5].normal /= sqrt(mPlanes[5].normal.x * mPlanes[5].normal.x + mPlanes[5].normal.y * mPlanes[5].normal.y + mPlanes[5].normal.z * mPlanes[5].normal.z);
	
	// Assign a single point that's on the plane
	mPlanes[0].pointOnPlane = _CamNearCenter;
	mPlanes[1].pointOnPlane = _CamNearCenter;
	mPlanes[2].pointOnPlane = _CamNearCenter;
	mPlanes[3].pointOnPlane = _CamNearCenter;
	mPlanes[4].pointOnPlane = _CamNearCenter;
	mPlanes[5].pointOnPlane = _CamNearCenter;
}

// http://www.iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm
inline bool ShouldFrustumCull(BoundingBox box)
{
	if (_ShouldFrustumCull == false)
	{
		return false;
	}

	// Calculate the frustum planes
	FrustumPlane mPlanes[6];
	CalculateCameraPlanes(mPlanes);

	// Frustum Culling
	// Move the planes facing away from the light direction, towards the light so we can get objects adding shadows to our frustum
	float3 shadowCullingOffset = -(_LightDirection * _ShadowCullingLength);
	mPlanes[0].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[0].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[1].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[1].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[2].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[2].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[3].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[3].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[4].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[4].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[5].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[5].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);

	// check box outside/inside of frustum
	int result = 0;
	float3 planeNormal;
	float3 pointOnPlane;
	for(int i = 0; i < 5; i++)
	{
		result = 0;
		planeNormal = mPlanes[i].normal.xyz;
		pointOnPlane = mPlanes[i].pointOnPlane;
		result += ((dot(planeNormal, float3(box.minPos.x, box.minPos.y, box.minPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.maxPos.x, box.minPos.y, box.minPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.minPos.x, box.maxPos.y, box.minPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.maxPos.x, box.maxPos.y, box.minPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.minPos.x, box.minPos.y, box.maxPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.maxPos.x, box.minPos.y, box.maxPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.minPos.x, box.maxPos.y, box.maxPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.maxPos.x, box.maxPos.y, box.maxPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		
		if (result == 8)
		{
			return true;
		}
	}

	return false;
}

// Assign LOD Level
inline void AssignLod(ComputeShaderInputData instance, float camDist, uint tID)
{
	if (_ShouldLOD == false)
	{
		InterlockedAdd(argsBuffer[instance.drawCallID + 11], 1);
	}
	else if (camDist < LOD00_RANGE)
	{
		InterlockedAdd(argsBuffer[instance.drawCallID + 1], 1);
	}
	else if (camDist < LOD01_RANGE)
	{
		InterlockedAdd(argsBuffer[instance.drawCallID + 6], 1);
	}
	else
	{
		InterlockedAdd(argsBuffer[instance.drawCallID + 11], 1);
	}
}


[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
		in uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
		in uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
		in uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount 
		in uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
	)        
{
    // Calculate the instance index
	uint tID = _dispatchThreadID.x;

	// Reset the is visible state
	_IsVisibleBuffer[tID] = 0;

	// If the instance is the power of two padding...
	if (positionBuffer[tID].drawCallID == 666)
	{
		return;
	}

	// Update the instance to camera distance
	positionBuffer[tID].distanceToCamera = distance(positionBuffer[tID].position.xyz, _CamNearCenter.xyz);
	
	// Get the instance data
	ComputeShaderInputData instance = positionBuffer[tID];
	
	// Get the bounding box corners
	BoundingBox boundingBox;
	CalculateBoundingBoxCorners(instance.position, instance.boundsExtents, boundingBox);

	// Frustum Culling
	if (ShouldFrustumCull(boundingBox))
	{
		return;
	}

	// Occlusion Culling
	if (ShouldHiZCull(instance, instance.position, boundingBox))
	{
		return;
	}
	
	// LOD
	_IsVisibleBuffer[tID] = 1;
	AssignLod(instance, instance.distanceToCamera, tID);
}