//--------------------------------------------------------------------------------------
// Includes
//--------------------------------------------------------------------------------------

#include "ShaderInclude_IndirectStructs.cginc"

//--------------------------------------------------------------------------------------
// Pragmas
//--------------------------------------------------------------------------------------

#pragma kernel CSMain

//--------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------

#define THREAD_GROUP_SIZE_X 64
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

#define LOD00_RANGE 500
#define LOD01_RANGE 2000

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------

cbuffer CB
{
	bool _ShouldFrustumCull;
	bool _ShouldOcclusionCull;
	bool _ShouldLOD;
	float _ShadowCullingLength;
	float2 _HiZTextureSize;
	float3 _CamFarCenter;
	float3 _CamNearCenter;
	float3 _LightDirection;
	float4x4 _UNITY_MATRIX_MVP;
	Texture2D<float4> _HiZMap;
	SamplerState sampler_HiZMap; // "sampler" + “_HiZMap”
};

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------

RWStructuredBuffer<InstanceData> _InstanceDataBuffer;
RWStructuredBuffer<uint> _ArgsBuffer;
RWStructuredBuffer<uint> _IsVisibleBuffer;

//--------------------------------------------------------------------------------------
// Kernels & Functions
//--------------------------------------------------------------------------------------

inline bool AreDirectionsFacingEachother(float3 dir1, float3 dir2)
{
	return dot(dir1, dir2) > 0.0;
}

inline void CalculateBoundingBoxCorners(in float3 center, in float3 extents, inout BoundingBox boxCorners)
{
	boxCorners.center = center;
	boxCorners.minPos = center - extents;
	boxCorners.maxPos = center + extents;
	boxCorners.corners[0] = float4(center + extents * float3(-1.0, -1.0, -1.0), 1.0);
	boxCorners.corners[1] = float4(center + extents * float3(-1.0, -1.0,  1.0), 1.0);
	boxCorners.corners[4] = float4(center + extents * float3( 1.0, -1.0, -1.0), 1.0);
	boxCorners.corners[5] = float4(center + extents * float3( 1.0, -1.0,  1.0), 1.0);
	boxCorners.corners[2] = float4(center + extents * float3(-1.0,  1.0, -1.0), 1.0);
	boxCorners.corners[3] = float4(center + extents * float3(-1.0,  1.0,  1.0), 1.0);
	boxCorners.corners[6] = float4(center + extents * float3( 1.0,  1.0, -1.0), 1.0);
	boxCorners.corners[7] = float4(center + extents * float3( 1.0,  1.0,  1.0), 1.0);
}

// Check Hi-Z Culling
// https://interplayoflight.wordpress.com/2017/11/15/experiments-in-gpu-based-occlusion-culling/
inline bool ShouldHiZCull(InstanceData instance, float3 position, BoundingBox boundingBox)
{
	if (_ShouldOcclusionCull == false)
	{
		return false;
	}

	// Calculate the min and max positions of the instance bounds
	float MaxMipLevel = 10;
	float minZ = 1;
	float2 minXY = 1;
	float2 maxXY = 0;

	[unroll]
	for (int i = 0; i < 8; i++)
	{
		//transform world space aaBox to NDC
		float4 clipPos = mul(_UNITY_MATRIX_MVP, boundingBox.corners[i]);
		clipPos.z = max(clipPos.z, 0);
		
		clipPos.xyz = clipPos.xyz / clipPos.w;

		clipPos.z = 1.0 - clipPos.z;
		clipPos.xy = clamp(clipPos.xy, -1, 1);
		clipPos.xy = clipPos.xy * float2(0.5, 0.5) + float2(0.5, 0.5);

		minXY = min(clipPos.xy, minXY);
		maxXY = max(clipPos.xy, maxXY);

		minZ = saturate(min(minZ, clipPos.z));
	}
	
	float4 boxUVs = float4(minXY, maxXY);
 
	// Calculate hi-Z buffer mip
	int2 size = (maxXY - minXY) * _HiZTextureSize.xy;
	float mip = ceil(log2(max(size.x, size.y)));
	mip = clamp(mip, 0, MaxMipLevel);
	mip = 0;

	// Texel footprint for the lower (finer-grained) level
	float  level_lower = max(mip - 1, 0);
	float2 scale = exp2(-level_lower);
	float2 a = floor(boxUVs.xy*scale);
	float2 b = ceil(boxUVs.zw*scale);
	float2 dims = b - a;

	// Use the lower level if we only touch <= 2 texels in both dimensions
	if (dims.x <= 2 && dims.y <= 2)
	{
		mip = level_lower;
	}

	// load depths from high z buffer
	float4 depth = {
		_HiZMap.SampleLevel(sampler_HiZMap, boxUVs.xy, mip).r,
		_HiZMap.SampleLevel(sampler_HiZMap, boxUVs.zy, mip).r,
		_HiZMap.SampleLevel(sampler_HiZMap, boxUVs.xw, mip).r,
		_HiZMap.SampleLevel(sampler_HiZMap, boxUVs.zw, mip).r
	};

	// find the max depth
	float epsilon = 0.005;
	float maxDepth = min(min(min(depth.x, depth.y), depth.z), depth.w) - epsilon;
	
	return minZ <= maxDepth;
}

inline void CalculateCameraPlanes(inout FrustumPlane mPlanes[6])
{
	// Here we are using Column Major matrix

	// Row Major Matrix
    // _m00, _m01, _m02, _m03
    // _m10, _m11, _m12, _m13
    // _m20, _m21, _m22, _m23
    // _m30, _m31, _m32, _m33

	// Column Major Matrix
	// _m00, _m10, _m20, _m30
	// _m01, _m11, _m21, _m31
	// _m02, _m12, _m22, _m32
	// _m03, _m13, _m23, _m33


	// Left clipping plane.
	mPlanes[0].normal = float4(
		_UNITY_MATRIX_MVP._m30 + _UNITY_MATRIX_MVP._m00, 
		_UNITY_MATRIX_MVP._m31 + _UNITY_MATRIX_MVP._m01, 
		_UNITY_MATRIX_MVP._m32 + _UNITY_MATRIX_MVP._m02, 
		_UNITY_MATRIX_MVP._m33 + _UNITY_MATRIX_MVP._m03
	);

	// Right clipping plane.
	mPlanes[1].normal = float4(
		_UNITY_MATRIX_MVP._m30 - _UNITY_MATRIX_MVP._m00, 
		_UNITY_MATRIX_MVP._m31 - _UNITY_MATRIX_MVP._m01, 
		_UNITY_MATRIX_MVP._m32 - _UNITY_MATRIX_MVP._m02, 
		_UNITY_MATRIX_MVP._m33 - _UNITY_MATRIX_MVP._m03
	);

	// Bottom clipping plane.
	mPlanes[2].normal = float4(
		_UNITY_MATRIX_MVP._m30 + _UNITY_MATRIX_MVP._m10, 
		_UNITY_MATRIX_MVP._m31 + _UNITY_MATRIX_MVP._m11, 
		_UNITY_MATRIX_MVP._m32 + _UNITY_MATRIX_MVP._m12, 
		_UNITY_MATRIX_MVP._m33 + _UNITY_MATRIX_MVP._m13
	);

	// Top clipping plane.
	mPlanes[3].normal = float4(
		_UNITY_MATRIX_MVP._m30 - _UNITY_MATRIX_MVP._m10, 
		_UNITY_MATRIX_MVP._m31 - _UNITY_MATRIX_MVP._m11, 
		_UNITY_MATRIX_MVP._m32 - _UNITY_MATRIX_MVP._m12, 
		_UNITY_MATRIX_MVP._m33 - _UNITY_MATRIX_MVP._m13
	);

	// Near clipping plane.
	mPlanes[4].normal = float4(
		_UNITY_MATRIX_MVP._m30 + _UNITY_MATRIX_MVP._m20, 
		_UNITY_MATRIX_MVP._m31 + _UNITY_MATRIX_MVP._m21, 
		_UNITY_MATRIX_MVP._m32 + _UNITY_MATRIX_MVP._m22, 
		_UNITY_MATRIX_MVP._m33 + _UNITY_MATRIX_MVP._m23
	);

	// Far clipping plane.
	mPlanes[5].normal = float4(
		_UNITY_MATRIX_MVP._m30 - _UNITY_MATRIX_MVP._m20, 
		_UNITY_MATRIX_MVP._m31 - _UNITY_MATRIX_MVP._m21, 
		_UNITY_MATRIX_MVP._m32 - _UNITY_MATRIX_MVP._m22, 
		_UNITY_MATRIX_MVP._m33 - _UNITY_MATRIX_MVP._m23
	);
	
	// Normalize the planes: normalizedPlane = (plane.xyzw) / sqrt(plane.x^2 + plane.y^2 + plane.z^2)
	// plane.xyz is now the normal and plane.w contains the distance from zero pos to the plane
	mPlanes[0].normal /= sqrt(mPlanes[0].normal.x * mPlanes[0].normal.x + mPlanes[0].normal.y * mPlanes[0].normal.y + mPlanes[0].normal.z * mPlanes[0].normal.z);
	mPlanes[1].normal /= sqrt(mPlanes[1].normal.x * mPlanes[1].normal.x + mPlanes[1].normal.y * mPlanes[1].normal.y + mPlanes[1].normal.z * mPlanes[1].normal.z);
	mPlanes[2].normal /= sqrt(mPlanes[2].normal.x * mPlanes[2].normal.x + mPlanes[2].normal.y * mPlanes[2].normal.y + mPlanes[2].normal.z * mPlanes[2].normal.z);
	mPlanes[3].normal /= sqrt(mPlanes[3].normal.x * mPlanes[3].normal.x + mPlanes[3].normal.y * mPlanes[3].normal.y + mPlanes[3].normal.z * mPlanes[3].normal.z);
	mPlanes[4].normal /= sqrt(mPlanes[4].normal.x * mPlanes[4].normal.x + mPlanes[4].normal.y * mPlanes[4].normal.y + mPlanes[4].normal.z * mPlanes[4].normal.z);
	mPlanes[5].normal /= sqrt(mPlanes[5].normal.x * mPlanes[5].normal.x + mPlanes[5].normal.y * mPlanes[5].normal.y + mPlanes[5].normal.z * mPlanes[5].normal.z);
	
	// Assign a single point that's on the plane
	mPlanes[0].pointOnPlane = _CamNearCenter;
	mPlanes[1].pointOnPlane = _CamNearCenter;
	mPlanes[2].pointOnPlane = _CamNearCenter;
	mPlanes[3].pointOnPlane = _CamNearCenter;
	mPlanes[4].pointOnPlane = _CamNearCenter;
	mPlanes[5].pointOnPlane = _CamNearCenter;
}

// http://www.iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm
inline bool ShouldFrustumCull(BoundingBox box, FrustumPlane mPlanes[6])
{
	if (_ShouldFrustumCull == false)
	{
		return false;
	}

	// Move the planes facing away from the light direction, towards the light so we can get objects adding shadows to our frustum
	float3 shadowCullingOffset = -(_LightDirection * _ShadowCullingLength);
	mPlanes[0].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[0].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[1].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[1].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[2].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[2].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[3].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[3].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[4].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[4].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[5].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[5].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);

	// check box outside/inside of frustum
	int result = 0;
	float3 planeNormal;
	float3 pointOnPlane;
	for(int i = 0; i < 5; i++)
	{
		result = 0;
		planeNormal = mPlanes[i].normal.xyz;
		pointOnPlane = mPlanes[i].pointOnPlane;
		result += ((dot(planeNormal, float3(box.minPos.x, box.minPos.y, box.minPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.maxPos.x, box.minPos.y, box.minPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.minPos.x, box.maxPos.y, box.minPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.maxPos.x, box.maxPos.y, box.minPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.minPos.x, box.minPos.y, box.maxPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.maxPos.x, box.minPos.y, box.maxPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.minPos.x, box.maxPos.y, box.maxPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot(planeNormal, float3(box.maxPos.x, box.maxPos.y, box.maxPos.z) - pointOnPlane) <= 0.0 ) ? 1 : 0);
		
		if (result == 8)
		{
			return true;
		}
	}

	return false;
}

// Assign LOD Level
inline void AssignLod(InstanceData instance, float camDist)
{
	// LOD02
	if (_ShouldLOD == false || camDist > LOD01_RANGE)
	{
		InterlockedAdd(_ArgsBuffer[instance.drawCallID + 11], 1);
	}
	// LOD01
	else if (camDist > LOD00_RANGE)
	{
		InterlockedAdd(_ArgsBuffer[instance.drawCallID + 6], 1);
	}
	// LOD00
	else
	{
		InterlockedAdd(_ArgsBuffer[instance.drawCallID + 1], 1);
	}
}

// Assign Shadow Caster
inline void AssignShadowCaster(InstanceData instance)
{
	InterlockedAdd(_ArgsBuffer[instance.drawCallID + 16], 1);
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
		in uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
		in uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
		in uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount 
		in uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
	)        
{
    // Calculate the instance index
	uint tID = _dispatchThreadID.x;

	// Reset the is visible state
	_IsVisibleBuffer[tID] = 0;

	// If the instance is the power of two padding...
	if (_InstanceDataBuffer[tID].drawCallID == 666)
	{
		return;
	}

	// Update the instance to camera distance
	_InstanceDataBuffer[tID].distanceToCamera = distance(_InstanceDataBuffer[tID].position.xyz, _CamNearCenter.xyz);
	
	// Get the instance data
	InstanceData instance = _InstanceDataBuffer[tID];
	
	// Get the bounding box corners
	BoundingBox boundingBox;
	CalculateBoundingBoxCorners(instance.boundsCenter, instance.boundsExtents, boundingBox);

	// Calculate the frustum planes
	FrustumPlane mPlanes[6];
	CalculateCameraPlanes(mPlanes);

	// If we pass the frustum check
	if (ShouldFrustumCull(boundingBox, mPlanes))
	{
		return;
	}

	// Do we pass the occlusion pass?
	if (ShouldHiZCull(instance, instance.position, boundingBox))
	{
		return;
	}

	// Mark the instance as visible
	_IsVisibleBuffer[tID] = 1;
	
	// Assign the correct LOD
	AssignLod(instance, instance.distanceToCamera);
	AssignShadowCaster(instance);

	// TODO: Detail (Screen size) Culling...
	// float4 minClipPos = mul(_UNITY_MATRIX_MVP, float4(boundingBox.minPos, 1.0));
	// float4 maxClipPos = mul(_UNITY_MATRIX_MVP, float4(boundingBox.maxPos, 1.0));
	// minClipPos.xyz = minClipPos.xyz / minClipPos.w;
	// maxClipPos.xyz = maxClipPos.xyz / maxClipPos.w;

	// float f = 0.03;
	// Do we pass the detail culling?
	// if (abs(minClipPos.x - maxClipPos.x) < f && abs(minClipPos.y - maxClipPos.y) > f)
	// {
	// 	return
	// }
}