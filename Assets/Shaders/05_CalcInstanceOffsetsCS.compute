//--------------------------------------------------------------------------------------
// Includes
//--------------------------------------------------------------------------------------



//--------------------------------------------------------------------------------------
// Pragmas
//--------------------------------------------------------------------------------------

#pragma kernel CSMain

//--------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------

#define THREAD_GROUP_SIZE_X 1
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------

cbuffer CB
{
	uint NoofDrawcalls;
}

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------

RWBuffer<uint> drawcallDataOut;

//--------------------------------------------------------------------------------------
// Kernels & Functions
//--------------------------------------------------------------------------------------

// #if 0

// // Based on Parallel Prefix Sum (Scan) with CUDA by Mark Harris
// groupshared uint temp[2 * THREAD_GROUP_SIZE_X];

// [numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
// inline void CSMain (
// 		in uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
// 		in uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
// 		in uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount 
// 		in uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
// 	)        
// {
// 	int tID = _dispatchThreadID.x;

// 	int offset = 1;
// 	temp[2 * tID] = drawcallDataOut[ 5 * (2 * tID) + 1];			// load input into shared memory
// 	temp[2 * tID + 1] = drawcallDataOut[5 * (2 * tID + 1) + 1];

// 	// TODO!!!
// 	//UINT noofGroups = noofInstancesPowOf2 / (2 * scanThreadGroupSize);
// 	const int NoofDrawcalls = 1;//64 / (2 * THREAD_GROUP_SIZE_X);
// 	int d;

// 	//perform reduction
// 	for (d = NoofDrawcalls >> 1; d > 0; d >>= 1)
// 	{
// 		GroupMemoryBarrierWithGroupSync();

// 		if (tID < d)
// 		{
// 			int ai = offset * (2 * tID + 1) - 1;
// 			int bi = offset * (2 * tID + 2) - 1;
// 			temp[bi] += temp[ai];
// 		}
// 		offset *= 2;
// 	}

// 	// clear the last element
// 	if (tID == 0)
// 	{
// 		temp[NoofDrawcalls - 1] = 0;
// 	}

// 	//perform downsweep and build scan
// 	for (d = 1; d < NoofDrawcalls; d *= 2)
// 	{
// 		offset >>= 1;

// 		GroupMemoryBarrierWithGroupSync();

// 		if (tID < d)
// 		{
// 			int ai = offset * (2 * tID + 1) - 1;
// 			int bi = offset * (2 * tID + 2) - 1;
// 			int t = temp[ai];
// 			temp[ai] = temp[bi];
// 			temp[bi] += t;
// 		}
// 	}

// 	GroupMemoryBarrierWithGroupSync();

// 	drawcallDataOut[5 * (2 * tID) + 4] = temp[2 * tID]; // store to main memory
// 	drawcallDataOut[5 * (2 * tID + 1) + 4] = temp[2 * tID + 1];
// }

// #else

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void CSMain(uint3 threadID : SV_DispatchThreadID)
{
	//patch up the visible instance counts per prop type 
	for (uint k = 1; k < NoofDrawcalls; k++)
	{
		drawcallDataOut[k * 5 + 4] = drawcallDataOut[(k - 1) * 5 + 4] +	//previous prop type offset 
									 drawcallDataOut[(k - 1) * 5 + 1];	//previous prop type number of instances
	}
}

// #endif