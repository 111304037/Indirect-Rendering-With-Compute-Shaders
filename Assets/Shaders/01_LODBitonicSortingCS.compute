//--------------------------------------------------------------------------------------
// Includes
//--------------------------------------------------------------------------------------

#include "ShaderInclude_IndirectStructs.cginc"

//--------------------------------------------------------------------------------------
// Pragmas
//--------------------------------------------------------------------------------------

#pragma kernel BitonicSort
#pragma kernel MatrixTranspose

//--------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------

#define BITONIC_BLOCK_SIZE 256
#define TRANSPOSE_BLOCK_SIZE 8

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------

cbuffer CB
{
	uint _Level;
	uint _LevelMask;
	uint _Width;
	uint _Height;
};

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------

StructuredBuffer  <InstanceData> Input;
RWStructuredBuffer<InstanceData> Data;

//--------------------------------------------------------------------------------------
// Bitonic Sort Compute Shader
//--------------------------------------------------------------------------------------
groupshared InstanceData shared_data[BITONIC_BLOCK_SIZE];

[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void BitonicSort(uint3 Gid  : SV_GroupID, 
				 uint3 DTid : SV_DispatchThreadID, 
				 uint3 GTid : SV_GroupThreadID, 
				 uint  GI   : SV_GroupIndex)
{
	// Load shared data
	uint tID = DTid.x;

	shared_data[GI] = Data[tID];
	GroupMemoryBarrierWithGroupSync();

	// Sort the shared data
	for (uint j = _Level >> 1; j > 0; j >>= 1)
    {
        InstanceData result = shared_data[GI];
        InstanceData inst1 = shared_data[GI & ~j];
        InstanceData inst2 = shared_data[GI | j];

        float dist1 = inst1.drawCallID * 5000 + inst1.distanceToCamera;
        float dist2 = inst2.drawCallID * 5000 + inst2.distanceToCamera;

        if ((dist1 <= dist2) == ((bool)(_LevelMask & tID)))
        {
            result = shared_data[GI ^ j];
        }

        GroupMemoryBarrierWithGroupSync();

        shared_data[GI] = result;
        GroupMemoryBarrierWithGroupSync();
    }

	// Store shared data
	Data[tID] = shared_data[GI];
}

//--------------------------------------------------------------------------------------
// Matrix Transpose Compute Shader
//--------------------------------------------------------------------------------------
groupshared InstanceData transpose_shared_data[TRANSPOSE_BLOCK_SIZE * TRANSPOSE_BLOCK_SIZE];

[numthreads(TRANSPOSE_BLOCK_SIZE, TRANSPOSE_BLOCK_SIZE, 1)]
void MatrixTranspose(uint3 Gid  : SV_GroupID, 
					 uint3 DTid : SV_DispatchThreadID, 
					 uint3 GTid : SV_GroupThreadID, 
					 uint  GI   : SV_GroupIndex)
{
	transpose_shared_data[GI] = Input[DTid.y * _Width + DTid.x];
	GroupMemoryBarrierWithGroupSync();

	uint2 XY = DTid.yx - GTid.yx + GTid.xy;
	Data[XY.y * _Height + XY.x] = transpose_shared_data[GTid.x * TRANSPOSE_BLOCK_SIZE + GTid.y];
}