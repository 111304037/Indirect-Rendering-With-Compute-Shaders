//--------------------------------------------------------------------------------------
// Includes
//--------------------------------------------------------------------------------------

#include "ShaderInclude_IndirectStructs.cginc"

//--------------------------------------------------------------------------------------
// Pragmas
//--------------------------------------------------------------------------------------

#pragma kernel CSMain

//--------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------

#define THREAD_GROUP_SIZE_X 128
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------

cbuffer CB
{
	groupshared uint temp[2 * THREAD_GROUP_SIZE_X];
}

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------

StructuredBuffer<InstanceData> _InstanceDataIn;
Buffer<uint> _InstancePredicatesIn;
Buffer<uint> _GroupSumArray;
Buffer<uint> _ScannedInstancePredicates;
RWStructuredBuffer<InstanceDrawData> _InstanceDataOut;
// RWBuffer<uint> drawcallIDDataOut;

//--------------------------------------------------------------------------------------
// Kernels & Functions
//--------------------------------------------------------------------------------------

// Based on Parallel Prefix Sum (Scan) with CUDA by Mark Harris
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
		in uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
		in uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
		in uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount 
		in uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
	)        
{
	uint tID = _dispatchThreadID.x;
	uint groupSum = _groupID.x > 0 ? _GroupSumArray[_groupID.x] : 0;
	uint instanceDataOutIndex;

	//scatter results
	if (_InstancePredicatesIn[tID] == 1)
	{
		instanceDataOutIndex = _ScannedInstancePredicates[tID] + groupSum;

		//copy transform
		InstanceData instance = _InstanceDataIn[tID];

		InstanceDrawData output;
		output.position = instance.position;
		output.rotation = instance.rotation;
		output.uniformScale = instance.uniformScale;
		
		_InstanceDataOut[instanceDataOutIndex] = output;

		// _InstanceDataOut[instanceDataOutIndex].World_Row1 = _InstanceDataIn[tID].World_Row1;
		// _InstanceDataOut[instanceDataOutIndex].World_Row2 = _InstanceDataIn[tID].World_Row2;
		// _InstanceDataOut[instanceDataOutIndex].World_Row3 = _InstanceDataIn[tID].World_Row3;

		//copy packed uint with mesh lod/index and drawcall_ID
		// _InstanceDataOut[instanceDataOutIndex].MeshLOD_MeshIndex_DrawcallID = 0;//_InstanceDataIn[ tID].MeshLOD_MeshIndex_DrawcallID;

		// //write to the drawcall ID stream for this instance
		// drawcallIDDataOut[ instanceDataOutIndex ] = tID % 2;//_InstanceDataIn[tID].MeshLOD_MeshIndex_DrawcallID & 0xFFFF ;
	}
}