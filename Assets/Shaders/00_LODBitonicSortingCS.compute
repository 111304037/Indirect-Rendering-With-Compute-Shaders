//--------------------------------------------------------------------------------------
// Pragmas
//--------------------------------------------------------------------------------------

#pragma kernel BitonicSort
#pragma kernel MatrixTranspose

//--------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------

#define BITONIC_BLOCK_SIZE 256
#define TRANSPOSE_BLOCK_SIZE 8

struct ComputeShaderInputData
{
	uint drawCallID;		// 1
	float3 position; 		// 3
	float3 rotation; 		// 6
	float uniformScale;		// 7
	float3 boundsCenter; 	// 10
	float3 boundsExtents; 	// 13
	float distanceToCamera; // 14
};

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------
cbuffer CB
{
	uint _Level;
	uint _LevelMask;
	uint _Width;
	uint _Height;
};

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------
StructuredBuffer  <ComputeShaderInputData> Input;
RWStructuredBuffer<ComputeShaderInputData> Data;

//--------------------------------------------------------------------------------------
// Bitonic Sort Compute Shader
//--------------------------------------------------------------------------------------
groupshared ComputeShaderInputData shared_data[BITONIC_BLOCK_SIZE];

[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void BitonicSort(uint3 Gid  : SV_GroupID, 
				 uint3 DTid : SV_DispatchThreadID, 
				 uint3 GTid : SV_GroupThreadID, 
				 uint  GI   : SV_GroupIndex)
{
	uint tID = DTid.x;
	// Load shared data
	shared_data[GI] = Data[tID];
	GroupMemoryBarrierWithGroupSync();

	// Sort the shared data
	for (uint j = _Level >> 1; j > 0; j >>= 1)
	{
		ComputeShaderInputData result = shared_data[GI];
		
		if (
				((shared_data[GI & ~j].distanceToCamera <= shared_data[GI | j].distanceToCamera) == ((bool)(_LevelMask & tID)))
				&& (shared_data[GI & ~j].drawCallID == shared_data[GI | j].drawCallID)
		   )
		{
			result = shared_data[GI ^ j];
		}
		GroupMemoryBarrierWithGroupSync();

		shared_data[GI] = result;
		GroupMemoryBarrierWithGroupSync();
	}

	// Store shared data
	Data[tID] = shared_data[GI];
}

//--------------------------------------------------------------------------------------
// Matrix Transpose Compute Shader
//--------------------------------------------------------------------------------------
groupshared ComputeShaderInputData transpose_shared_data[TRANSPOSE_BLOCK_SIZE * TRANSPOSE_BLOCK_SIZE];

[numthreads(TRANSPOSE_BLOCK_SIZE, TRANSPOSE_BLOCK_SIZE, 1)]
void MatrixTranspose(uint3 Gid  : SV_GroupID, 
					 uint3 DTid : SV_DispatchThreadID, 
					 uint3 GTid : SV_GroupThreadID, 
					 uint  GI   : SV_GroupIndex)
{
	transpose_shared_data[GI] = Input[DTid.y * _Width + DTid.x];
	GroupMemoryBarrierWithGroupSync();

	uint2 XY = DTid.yx - GTid.yx + GTid.xy;
	Data[XY.y * _Height + XY.x] = transpose_shared_data[GTid.x * TRANSPOSE_BLOCK_SIZE + GTid.y];
}