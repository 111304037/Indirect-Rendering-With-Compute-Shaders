// kernels to compile...
#pragma kernel CSMain

// Defines
#define THREAD_GROUP_SIZE_X 1
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1
#define ALWAYS_DRAW_RANGE 50
#define SHOULD_FRUSTUM_CULL 1
// #define SHOULD_SHADOW_CULL 1
#define SHOULD_OCCLUSION_CULL 1
#define SHOULD_LOD 1

// Structs
struct FrustumPlane
{
	float4 normal;
	float3 pointOnPlane;
};

struct BoundingBox
{
	float4 corners[8];
	float3 center;
	float3 minPos;
	float3 maxPos;
};

struct ComputeShaderInputData
{
	float3 position; 		// 3
	float3 rotation; 		// 6
	float uniformScale;		// 7
	float3 boundsCenter; 	// 10
	float3 boundsExtents; 	// 13
	float lod00Range; 		// 14
	float lod01Range; 		// 15
	float lod02Range; 		// 16
};

struct OutputData
{
	float3 position;// 3
	float3 rotation;// 6
	float uniformScale;	// 7
	float unused;	// 8

};

// Input
RWStructuredBuffer<ComputeShaderInputData> positionBuffer;
AppendStructuredBuffer<OutputData> lod00PositionsBuffer;
AppendStructuredBuffer<OutputData> lod01PositionsBuffer;
AppendStructuredBuffer<OutputData> lod02PositionsBuffer;

uniform float _ShadowCullingLength;
uniform float3 _LightDirection;
uniform float4x4 _UNITY_MATRIX_MVP;
uniform float2 _HiZTextureSize;
uniform float3 _CamPos;
uniform Texture2D<float4> _HiZMap;
uniform SamplerState sampler_HiZMap; // "sampler" + “_HiZMap”
uniform uint _NumberOfInstances;
uniform float _Test;

inline bool AreDirectionsFacingEachother(float3 dir1, float3 dir2)
{
	return dot(dir1, dir2) > 0.0;
}

inline void CalculateBoundingBoxCorners(in float3 center, in float3 extents, inout BoundingBox boxCorners)
{
	boxCorners.center = center;
	boxCorners.minPos = center - extents;
	boxCorners.maxPos = center + extents;
	boxCorners.corners[0] = float4(center + extents * float3(-1.0, -1.0, -1.0), 1.0);
	boxCorners.corners[1] = float4(center + extents * float3(-1.0, -1.0,  1.0), 1.0);
	boxCorners.corners[4] = float4(center + extents * float3( 1.0, -1.0, -1.0), 1.0);
	boxCorners.corners[5] = float4(center + extents * float3( 1.0, -1.0,  1.0), 1.0);
	boxCorners.corners[2] = float4(center + extents * float3(-1.0,  1.0, -1.0), 1.0);
	boxCorners.corners[3] = float4(center + extents * float3(-1.0,  1.0,  1.0), 1.0);
	boxCorners.corners[6] = float4(center + extents * float3( 1.0,  1.0, -1.0), 1.0);
	boxCorners.corners[7] = float4(center + extents * float3( 1.0,  1.0,  1.0), 1.0);
}

inline void CalculateClipMinAndMax(in BoundingBox boxCorners, inout float3 clipmin, inout float3 clipmax)
{
	boxCorners.corners[0] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[0]);
	boxCorners.corners[1] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[1]);
	boxCorners.corners[2] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[2]);
	boxCorners.corners[3] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[3]);
	boxCorners.corners[4] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[4]);
	boxCorners.corners[5] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[5]);
	boxCorners.corners[6] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[6]);
	boxCorners.corners[7] = mul(_UNITY_MATRIX_MVP, boxCorners.corners[7]);

	// clipmin = (boxCorners.corners[0] / boxCorners.corners[0].w).xyz;
	// clipmin.z = 1.0 - clipmin.z;
	// clipmin.xy = clipmin.xy * float2(0.5, -0.5) + float2(0.5, 0.5);
	
	// clipmax = (boxCorners.corners[0] / boxCorners.corners[0].w).xyz;
	// clipmax.z = 1.0 - clipmax.z;
    // clipmax.xy = clipmax.xy * float2(0.5, -0.5) + float2(0.5, 0.5);
	
	clipmin = 1.0;
	clipmax = 0.0;
	for (int n = 0; n < 8; n++)
	{
		float4 clipPos = boxCorners.corners[n] / boxCorners.corners[n].w;
		clipPos.z = 1.0 - clipPos.z;
		// clipPos.z = clipPos.z * 0.5 + 0.5;

        clipPos.xy = clipPos.xy * float2(0.5, 0.5) + float2(0.5, 0.5);
		
		clipmin.x = min(clipmin.x, clipPos.x);
		clipmin.y = min(clipmin.y, clipPos.y);
		clipmin.z = saturate(min(clipmin.z, clipPos.z));

		clipmax.x = max(clipmax.x, clipPos.x);
		clipmax.y = max(clipmax.y, clipPos.y);
		clipmax.z = saturate(max(clipmax.z, clipPos.z));
	}
}

// Check Hi-Z Culling
// http://rastergrid.com/blog/2010/10/hierarchical-z-map-based-occlusion-culling/
// https://github.com/nvpro-samples/gl_occlusion_culling
// http://blog.selfshadow.com/publications/practical-visibility/
inline bool ShouldHiZCull(float3 position, BoundingBox boundingBox)
{
	if (SHOULD_OCCLUSION_CULL == false)
	{
		return false;
	}

	// Calculate the min and max positions of the instance bounds
	float3 clipmin;
	float3 clipmax;
	CalculateClipMinAndMax(boundingBox, clipmin, clipmax);

	// 
	if (clipmax.z < 0.000001)
	{
		return true;
	}

    // Hi-Z approach that allows for more samples.
    // https://www.gamedev.net/blogs/entry/2249535-hierarchical-z-buffer-occlusion-culling-updated-07152011/
    const    int numSamples = 8;
    const    int   xSamples = numSamples + 1;
    const    int   ySamples = numSamples + 1;
    const  float    widthSS = (clipmax.x - clipmin.x);
	const  float   heightSS = (clipmax.y - clipmin.y);	
    const  float  maxSizeSS = max(widthSS * _HiZTextureSize.x, heightSS * _HiZTextureSize.y);	
    const  float        mip = max(0, ceil(log2(maxSizeSS)));	
    const  float      stepX = widthSS / xSamples;	
    const  float      stepY = heightSS / ySamples;	
    const float2    bOffset = 0.5 / _HiZTextureSize;
    
    float HIZdepth = 0;	
    float yPos = clipmin.y;
    for(int y = 0; y < ySamples; ++y)
    {
        float xPos = clipmin.x;
        for(int x = 0; x < xSamples; ++x)
        {
            const float2 nCoords0 = float2(xPos, yPos);// + bOffset;
            HIZdepth = max(HIZdepth, _HiZMap.SampleLevel(sampler_HiZMap, nCoords0, mip).r);
            xPos += stepX; 
        }
        yPos += stepY;	
    }

	return clipmin.z < HIZdepth;
	
	// Debug...
	// HIZdepth = max(HIZdepth, _HiZMap.SampleLevel(sampler_HiZMap, float2(clipmin.x, clipmin.y), _Test).g);
    // return clipmax.z < HIZdepth;
	// return clipmax.z < _Test;
	// return clipmin.z < _Test;
	// return clipmax.y < _Test;
	// return clipmin.y < _Test;
	// return clipmax.x < _Test;
	// return clipmin.x < _Test;
}

inline void CalculateCameraPlanes(inout FrustumPlane mPlanes[5])
{
	// Here we are using Column Major matrix
	// We skip the far plane and assume the user always has the furthest LOD distace closer than the far plane!

	// Row Major Matrix
    // _m00, _m01, _m02, _m03
    // _m10, _m11, _m12, _m13
    // _m20, _m21, _m22, _m23
    // _m30, _m31, _m32, _m33

	// Column Major Matrix
	// _m00, _m10, _m20, _m30
	// _m01, _m11, _m21, _m31
	// _m02, _m12, _m22, _m32
	// _m03, _m13, _m23, _m33


	// Left clipping plane.
	mPlanes[0].normal = float4(
		_UNITY_MATRIX_MVP._m30 + _UNITY_MATRIX_MVP._m00, 
		_UNITY_MATRIX_MVP._m31 + _UNITY_MATRIX_MVP._m01, 
		_UNITY_MATRIX_MVP._m32 + _UNITY_MATRIX_MVP._m02, 
		_UNITY_MATRIX_MVP._m33 + _UNITY_MATRIX_MVP._m03
	);

	// Right clipping plane.
	mPlanes[1].normal = float4(
		_UNITY_MATRIX_MVP._m30 - _UNITY_MATRIX_MVP._m00, 
		_UNITY_MATRIX_MVP._m31 - _UNITY_MATRIX_MVP._m01, 
		_UNITY_MATRIX_MVP._m32 - _UNITY_MATRIX_MVP._m02, 
		_UNITY_MATRIX_MVP._m33 - _UNITY_MATRIX_MVP._m03
	);

	// Bottom clipping plane.
	mPlanes[2].normal = float4(
		_UNITY_MATRIX_MVP._m30 + _UNITY_MATRIX_MVP._m10, 
		_UNITY_MATRIX_MVP._m31 + _UNITY_MATRIX_MVP._m11, 
		_UNITY_MATRIX_MVP._m32 + _UNITY_MATRIX_MVP._m12, 
		_UNITY_MATRIX_MVP._m33 + _UNITY_MATRIX_MVP._m13
	);

	// Top clipping plane.
	mPlanes[3].normal = float4(
		_UNITY_MATRIX_MVP._m30 - _UNITY_MATRIX_MVP._m10, 
		_UNITY_MATRIX_MVP._m31 - _UNITY_MATRIX_MVP._m11, 
		_UNITY_MATRIX_MVP._m32 - _UNITY_MATRIX_MVP._m12, 
		_UNITY_MATRIX_MVP._m33 - _UNITY_MATRIX_MVP._m13
	);

	// Near clipping plane.
	mPlanes[4].normal = float4(
		_UNITY_MATRIX_MVP._m30 + _UNITY_MATRIX_MVP._m20, 
		_UNITY_MATRIX_MVP._m31 + _UNITY_MATRIX_MVP._m21, 
		_UNITY_MATRIX_MVP._m32 + _UNITY_MATRIX_MVP._m22, 
		_UNITY_MATRIX_MVP._m33 + _UNITY_MATRIX_MVP._m23
	);

	// Far clipping plane.
	// mPlanes[5].normal = float4(
	// 	_UNITY_MATRIX_MVP._m30 - _UNITY_MATRIX_MVP._m20, 
	// 	_UNITY_MATRIX_MVP._m31 - _UNITY_MATRIX_MVP._m21, 
	// 	_UNITY_MATRIX_MVP._m32 - _UNITY_MATRIX_MVP._m22, 
	// 	_UNITY_MATRIX_MVP._m33 - _UNITY_MATRIX_MVP._m23
	// );
	
	// Normalize the planes => normalizedPlane = (plane.xyzw) / sqrt(plane.x^2 + plane.y^2 + plane.z^2)
	// plane.xyz is now the normal and plane.w contains the distance from zero pos to the plane
	mPlanes[0].normal /= sqrt(mPlanes[0].normal.x * mPlanes[0].normal.x + mPlanes[0].normal.y * mPlanes[0].normal.y + mPlanes[0].normal.z * mPlanes[0].normal.z);
	mPlanes[1].normal /= sqrt(mPlanes[1].normal.x * mPlanes[1].normal.x + mPlanes[1].normal.y * mPlanes[1].normal.y + mPlanes[1].normal.z * mPlanes[1].normal.z);
	mPlanes[2].normal /= sqrt(mPlanes[2].normal.x * mPlanes[2].normal.x + mPlanes[2].normal.y * mPlanes[2].normal.y + mPlanes[2].normal.z * mPlanes[2].normal.z);
	mPlanes[3].normal /= sqrt(mPlanes[3].normal.x * mPlanes[3].normal.x + mPlanes[3].normal.y * mPlanes[3].normal.y + mPlanes[3].normal.z * mPlanes[3].normal.z);
	mPlanes[4].normal /= sqrt(mPlanes[4].normal.x * mPlanes[4].normal.x + mPlanes[4].normal.y * mPlanes[4].normal.y + mPlanes[4].normal.z * mPlanes[4].normal.z);
	// mPlanes[5].normal /= sqrt(mPlanes[5].normal.x * mPlanes[5].normal.x + mPlanes[5].normal.y * mPlanes[5].normal.y + mPlanes[5].normal.z * mPlanes[5].normal.z);
	
	// Assign a single point that's on the plane
	mPlanes[0].pointOnPlane = _CamPos;
	mPlanes[1].pointOnPlane = _CamPos;
	mPlanes[2].pointOnPlane = _CamPos;
	mPlanes[3].pointOnPlane = _CamPos;
	mPlanes[4].pointOnPlane = _CamPos;
	// mPlanes[5].pointOnPlane = _CamFarCenter;
}

// http://www.iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm
inline bool ShouldFrustumCull(BoundingBox box)
{
	if (SHOULD_FRUSTUM_CULL == false)
	{
		return false;
	}

	// Calculate the frustum planes
	FrustumPlane mPlanes[5];
	CalculateCameraPlanes(mPlanes);

	// check box outside/inside of frustum
	int result = 0;
	int i = 0;
	for(; i < 5; i++)
	{
		result = 0;
		result += ((dot( mPlanes[i].normal.xyz, float3(box.minPos.x, box.minPos.y, box.minPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.maxPos.x, box.minPos.y, box.minPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.minPos.x, box.maxPos.y, box.minPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.maxPos.x, box.maxPos.y, box.minPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.minPos.x, box.minPos.y, box.maxPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.maxPos.x, box.minPos.y, box.maxPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.minPos.x, box.maxPos.y, box.maxPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.maxPos.x, box.maxPos.y, box.maxPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		
		// If the object is completely outside of that plane...
		if (result == 8)
		{
			// We break and do a shadow check...
			break;
		}
	}

	// check frustum outside/inside box
	// result=0; for( int i=0; i<fru.mPoints.Length; i++ ) result += ((fru.mPoints[i].x > box.max.x)?1:0); if( result==8 ) return false;
	// result=0; for( int i=0; i<fru.mPoints.Length; i++ ) result += ((fru.mPoints[i].x < box.min.x)?1:0); if( result==8 ) return false;
	// result=0; for( int i=0; i<fru.mPoints.Length; i++ ) result += ((fru.mPoints[i].y > box.max.y)?1:0); if( result==8 ) return false;
	// result=0; for( int i=0; i<fru.mPoints.Length; i++ ) result += ((fru.mPoints[i].y < box.min.y)?1:0); if( result==8 ) return false;
	// result=0; for( int i=0; i<fru.mPoints.Length; i++ ) result += ((fru.mPoints[i].z > box.max.z)?1:0); if( result==8 ) return false;
	// result=0; for( int i=0; i<fru.mPoints.Length; i++ ) result += ((fru.mPoints[i].z < box.min.z)?1:0); if( result==8 ) return false;

	// if (SHOULD_SHADOW_CULL == false)
	// {

	// }

	// Shadow Culling
	// Move the planes facing away from the light direction, towards the light so we can get objects adding shadows to our frustum
	float3 shadowCullingOffset = -(_LightDirection * _ShadowCullingLength);
	mPlanes[0].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[0].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[1].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[1].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[2].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[2].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[3].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[3].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	mPlanes[4].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[4].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);
	// mPlanes[5].pointOnPlane += (AreDirectionsFacingEachother(mPlanes[5].normal.xyz, _LightDirection) ? shadowCullingOffset : 0);

	i = 0;
	for(; i < 5; i++)
	{
		result = 0;
		result += ((dot( mPlanes[i].normal.xyz, float3(box.minPos.x, box.minPos.y, box.minPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.maxPos.x, box.minPos.y, box.minPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.minPos.x, box.maxPos.y, box.minPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.maxPos.x, box.maxPos.y, box.minPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.minPos.x, box.minPos.y, box.maxPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.maxPos.x, box.minPos.y, box.maxPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.minPos.x, box.maxPos.y, box.maxPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		result += ((dot( mPlanes[i].normal.xyz, float3(box.maxPos.x, box.maxPos.y, box.maxPos.z) - mPlanes[i].pointOnPlane) <= 0.0 ) ? 1 : 0);
		
		if (result==8)
		{
			return true;
		}
	}

	return false;
}

// Assign LOD Level
inline void AssignLod(ComputeShaderInputData instance, float camDist)
{
	OutputData output;
	output.position = instance.position;
	output.rotation = instance.rotation;
	output.uniformScale = instance.uniformScale;
	output.unused = 0;

	if (SHOULD_LOD == false)
	{
		lod02PositionsBuffer.Append(output);
	}
	else if (camDist < instance.lod00Range)
	{
		lod00PositionsBuffer.Append(output);
	}
	else if (camDist < instance.lod01Range)
	{
		lod01PositionsBuffer.Append(output);
	}
	else if (camDist < instance.lod02Range)
	{
		lod02PositionsBuffer.Append(output);
	}
}


[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
		uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
		uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
		uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount (The variable I am looking for)
		uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
	)        
{
    // Calculate the instance index
	uint index = _dispatchThreadID.x;
	if (index > _NumberOfInstances)
	{
		return;
	}

	ComputeShaderInputData instance = positionBuffer[index];
	float camDist = abs(distance(instance.position.xyz, _CamPos));
	
	// Early out check: If the position is further than our lowest LOD level
	if (camDist >= instance.lod02Range)
	{
		return;
	}

	// Temp: Always draw objects very close 
	//if (camDist < ALWAYS_DRAW_RANGE)
	//{
	//	AssignLod(instance, camDist);
	//	return;
	//}

	// Get the bounding box corners
	BoundingBox boundingBox;
	CalculateBoundingBoxCorners(instance.boundsCenter, instance.uniformScale * instance.boundsExtents, boundingBox);

	// Frustum Culling & Shadow culling
	if (ShouldFrustumCull(boundingBox))
	{
		return;
	}

	// Occlusion Culling
	if (ShouldHiZCull(instance.position, boundingBox))
	{
		return;
	}
	
	// LOD
	AssignLod(instance, camDist);
}